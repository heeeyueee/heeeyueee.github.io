[{"content":" 浏览器渲染流程,transform,transition,animation\n 浏览器渲染 原理  浏览器的工作原理：\n 浏览器输入URL后发生了什么\nMDN浏览器渲染页面的工作原理\n流程 关键渲染路径\n关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。\n 根据HTML 构建HTML 树(DOM) 根据CSS 构建CSS 树(CSSOM) 将两棵树合并成一颗渲染树(rendertree) Layout 布局（ 文档流、盒模型、计算大小和位置） Paint 绘制（ 把边框颜色、文字颜色、阴影等画出来） Compose 合成（ 根据层叠关系展示画面）  三棵树    三种更新样式的方式\n  JS / CSS \u0026gt; 样式 \u0026gt; 布局 \u0026gt; 绘制 \u0026gt; 合成（全走）\n修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏览器将必须检查所有其他元素，然后“自动重排”页面。如：div.remove()\n  JS / CSS \u0026gt; 样式 \u0026gt; 绘制 \u0026gt; 合成\n  修改“paint only”属性（例如背景图片、文字颜色或阴影等），即不会影响页面布局的属性，则浏览器会跳过布局，但仍将执行绘制。\nrepaint+composite\n JS / CSS \u0026gt; 样式 \u0026gt; 合成\n更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成，如改变transform属性。\n  渲染性能优化 ​ 这是一个像素管道，JavaScript（代码变动）、Style（样式计算）、Layout（布局计算）、Paint（绘制）、Composite（合成）是像素绘制到屏幕上的五个关键点，分别针对每一部分进行渲染性能优化，让动画和交互应如丝绸般顺滑。\n1.JavaScript\n 对于动画效果的实现，避免使用 setTimeout 或 setInterval，请使用 requestAnimationFrame。 将长时间运行的 JavaScript 从主线程移到 Web Worker。 使用微任务来执行对多个帧的 DOM 更改。 使用 Chrome DevTools 的 Timeline 和 JavaScript 分析器来评估 JavaScript 的影响。  2.Style\n 降低选择器的复杂性；使用以类为中心的方法，例如 BEM。 减少必须计算其样式的元素数量。  3.Layout\n 尽可能避免布局操作 使用 flexbox 而不是浮动布局 避免强制同步布局 避免布局抖动  4.Paint\n 除 transform 或 opacity 属性之外，更改任何属性始终都会触发绘制。 绘制通常是像素管道中开销最大的部分；应尽可能避免绘制。 通过层的提升和动画的编排来减少绘制区域。 使用 Chrome DevTools 绘制分析器来评估绘制的复杂性和开销；应尽可能降低复杂性并减少开销。  5.Composite\n 坚持使用 transform 和 opacity 属性更改来实现动画。 使用 will-change 或 translateZ 提升移动的元素。 z-index 层数过多会占用更多的内存，请合理分配   详见google文章渲染性能优化\n transform 转换 功能 transform 转换来实现 2D 转换或者 3D 转换。inline 元素不支持transform ， 需要先变成block。\n使用  介绍常用的2D变换功能\n   位移：translate\ntransform: translate(水平位移, 垂直位移);\rtransform: translate(-50%, -50%);\r   参数为百分比，相对于自身移动。\n  实现绝对定位元素的居中\n{ position:absolute;\rleft:50%;\rtop:50%;\rtransform:translate(-50%,-50%); }\r     缩放：scale\ntransform: scale(x, y);\rtransform: scale(2, 0.5);\r 参数解释： x：表示水平方向的缩放倍数。y：表示垂直方向的缩放倍数。如果只写一个值就是等比例缩放。\n取值：大于1表示放大，小于1表示缩小。不能为百分比。\n  旋转：rotate\ntransform: rotate(角度);\rtransform: rotate(45deg);\r 参数解释：正值 顺时针；负值：逆时针。\n  倾斜：skew\ntransform:skew(x,y);\r 参数解释：第一个参数对应X轴倾斜的度数，第二个参数对应Y轴倾斜的度数 , 单位为deg。\n  transition 过渡 transition的中文含义是过渡。过渡是CSS3中具有颠覆性的一个特征，可以实现元素不同状态间的平滑过渡（补间动画），经常用来制作动画效果。\n属性    属性 值     transition-property 要过渡的属性名 all代表所有属性   transition-duration 过渡的持续时间   transition-timing-function 运动曲线 linear 线性 |ease 减速|ease 减速|ease-out 减速|ease-out 减速   transition-delay 过渡延迟    使用 transition: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;\rtransition: all 3s linear 0s;\r  不是所有属性都能过渡 display:none\u0026lt;==\u0026gt;block无法过渡 visibility：hidden\u0026lt;==\u0026gt;visible可以过渡  animation 动画 keyframes keyframes关键字用来定义动画的各个状态\n有两种写法 : 1.from to 写法 2.百分数写法\n@keyframes 动画名{\rfrom{ 初始状态 }\rto{ 结束状态 }\r}\r @keyframes rainbow {\r0% { background: #c00 }\r50% { background: orange }\r100% { background: yellowgreen }\r}\r 属性 animation: 时长 | 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名\ranimation: move1 1s alternate linear 3;\ranimation: move2 4s;\r    属性 值     执行次数 infinite   方向 reverse| alternate| alternate-reverse   填充模式（设置动画结束时，盒子的状态） none|forwards|backwards|both   是否暂停 paused | running    使用步骤 （1）通过@keyframes定义动画；\n（2）将这段动画通过百分比，分割成多个节点；然后各节点中分别定义各属性；\n（3）在指定元素里，通过 animation 属性调用动画。\n实践 CSS动画——爱心\n参考博客 google渲染树构建、布局及绘制\n十分钟读懂浏览器渲染流程\ngoogle渲染性能\n性能优化之关于像素管道\n前端性能优化 24 条建议\nCSS3动画详解（图文教程）\nCSS动画\n","date":"2020-11-09","permalink":"https://heeeyueee.github.io/post/css%E5%8A%A8%E7%94%BB/","tags":["CSS"],"title":"CSS动画"},{"content":" CSS的position属性,z-index的管理,层叠上下文\n  CSS 有两个最重要的基本属性：display 和 position。\ndisplay属性指定网页的布局。position属性指定网页的定位。\n布局是屏幕平面上的，定位是垂直于屏幕上的。\n 阅读之前要弄懂文档流和盒模型的概念 点击回顾\nposition属性  不管是哪种定位，都必须有一个参照物。找对了参照物，就成功了一半。\n static ​ static是position属性的默认值。如果省略position属性，浏览器就认为该元素是static定位。浏览器会按照源码的顺序，决定每个元素的位置，这称为\u0026quot;正常的页面流\u0026quot;（normal flow）。每个块级元素占据自己的区块（block），元素与元素之间不产生重叠，这个位置就是元素的默认位置。top、bottom、left、right这四个属性无效。\n static是非定位元素  relative ​ relative表示，相对的是元素本身应该出现的位置（即static时的位置）进行偏移。\n注意：\n 给absolute元素做父元素 配合z-index创建层叠上下文（不为auto） 不会脱离文档流，本应该占的位置还会保留，下一个元素不能忽视它的存在。  absolute ​ absolute相对于祖先元素中最近的一个定位元素（position非static）进行偏移，否则定位基点就会变成整个网页的根元素html。要写上top 、left属性值。\n注意：\n 脱离原来的位置，另起一层，如对话框的关闭按钮 善于用百分数，left:50% ;left:100% 会脱离文档流  fixed ​ fixed表示，相对于视口（viewport，浏览器窗口）进行偏移，即定位基点是浏览器窗口。\n注意：\n 常用于烦人的广告和回到顶部按钮 当祖先元素具有transform属性且不为none时，就会相对于祖先元素指定坐标，而不是浏览器窗口。（失效） 移动端不要使用这个属性（坑多）  sticky ​ 能够形成\u0026quot;动态固定\u0026quot;的效果，如导航栏，但是很多浏览器上还不支持此属性（简单了解）\nz-index 取值  关键字 ：auto 数值： 任意整数（包括正数、负数、0）  作用   z-index的默认值是auto, 不建立新的层叠上下文\n  当z-index取数值时，有两个作用：\n① 在当前元素建立一个堆叠上下文，即告诉浏览器这里出现了堆叠，需要考虑分层了。\n② 告诉浏览器当前元素在这个堆叠上下文中所占的位置\n  使用  只有position为relative/absolute/fixed的元素，z-index属性才起作用。注意，是该元素本身。 z-index遵循从父原则，即如果父元素和子元素同时设置了z-index,以父元素的z-index为准。 博客参考最佳实践 -1，0，1，2足够 负z-index逃不出层叠上下文  层叠上下文  不同的 DOM 元素组合在一起发生重叠的时候，它们的的显示顺序会遵循层叠水平的规则，而 z-index 是用来调整某个元素显示顺序，使该元素能够上浮下沉。\n 规则 那么当两个元素层叠水平相同的时候，这时候就要遵循下面两个准则：\n 后来居上原则 谁 z-index 大，谁在上的准则（同一个层叠上下文中）  那么当两个元素在不同的层叠上下文中时候：\n 先找到共同的祖先层叠上下文，然后比较共同层叠上下文下这个两个元素所在的局部层叠上下文的层叠水平 处在层叠上下文中的元素和处在这个上下文外的元素无关（z-index无法比较） 处在同一个层叠上下文中的元素的z-index才能比较  创建 ​ 一个页面中往往不仅仅只有一个层叠上下文，在一个层叠上下文内，我们按照层叠水平的规则来堆叠元素。，一些不正交的属性可以创建一个层叠上下文（小世界）。\n  默认创建层叠上下文\nHTML 根元素\n  需要配合 z-index 触发创建层叠上下文\n position 值为 absolute（绝对定位）或 relative（相对定位）且 z-index 值不为 auto 的元素 flex (flexbox) 容器的子元素，且 z-index 值不为 auto； grid (grid) 容器的子元素，且 z-index 值不为 auto；    不需要配合 z-index 触发创建层叠上下文\n opacity 属性值小于 1 的元素 position 值为 fixed（固定定位）或 sticky（粘滞定位）的元素 \u0026hellip;\u0026hellip;..    详见MDN文档\n参考文档 阮一峰css定位详解\n深入了解z-index的用法\n深入理解 CSS 属性 z-index\nMDN层叠上下文\nCSS定位属性详解\n","date":"2020-11-09","permalink":"https://heeeyueee.github.io/post/css%E5%AE%9A%E4%BD%8D/","tags":["CSS"],"title":"CSS定位"},{"content":" 学习目前流动使用的三种布局: float flex grid\n float布局  float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与绝对定位相反）。 —— MDN*\n  float布局的缺陷（引发的问题）:浮动高度塌陷  如果浮动元素的父元素没有设定高度，当其子元素浮动后，父元素就因为内部没有子元素撑起从而高度变为0；\n 引申：网页元素一般分为 普通流，浮动流，定位流。其中普通流和浮动流在一个层级上，定位流\u0026gt;浮动流\u0026gt;普通流。\n 解决: 在子元素上加上float和width,在父元素上加上.clearfix\n.clearfix:after{\rcontent: '';\rdisplay: block;\rclear: both;\r}\r   使用经验\n  最后一个元素不设长度或设置一个最大的长度\n  float布局是专门为IE浏览器做准备的，不需要做响应式的\n  平均布局中使用负margin\n  块级元素水平居中：margin：0 auto；最好=\u0026gt;margin-left：auto；margin-right：auto；\n    flex布局  文档中采用 Flex 布局的元素，称为 Flex 容器（flex container）。把一个容器的 display 属性值改为 flex 或者 inline-flex，容器中的直系子元素就会变为 Flex 元素，称为 Flex 项目（flex item）。\n Flex 容器上的属性   display\n.container {\rdisplay: flex; /* or inline-flex */\r}\r   flex-direction 决定主轴的方向\n.container {\rflex-direction: row | row-reverse | column | column-reverse;\r}\r   flex-wrap 定义元素如何换行\n.container {\rflex-wrap: nowrap | wrap | wrap-reverse;\r}\r   flex-flow : flex-direction flex-wrap;是flex-direction,flex-wrap的简写\n.container {\rflex-flow: column wrap;\r}\r   justify-content 定义了项目在主轴上的对齐方式\n.container {\rjustify-content: flex-start | flex-end | center | space-between | space-around | space-evenly ;\r}\r   align-items 定义项目在交叉轴上如何对齐\n.container {\ralign-items: stretch | flex-start | flex-end | center | baseline ;\r}\r   align-content 属性定义了多根轴线的对齐方式\n.container {\ralign-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch;\r}\r   Flex 元素上的属性   order 定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n.item {\rorder: 5; /* default is 0 */\r}\r   flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n.item {\rflex-grow: 4; /* default 0 */\r}\r   flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n.item {\rflex-shrink: 3; /* default 1 */\r}\r   align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。\n.item {\ralign-self: auto | flex-start | flex-end | center | baseline | stretch;\r}\r   flex 是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n.item {\rflex: none | [ \u0026lt;'flex-grow'\u0026gt; \u0026lt;'flex-shrink'\u0026gt;? || \u0026lt;'flex-basis'\u0026gt; ]\r}\r   grid布局  和flex布局相似，采用网格布局的区域，称为\u0026quot;容器\u0026quot;（container）。容器内部采用网格定位的子元素，称为\u0026quot;项目\u0026quot;（item）。\n grid容器上的属性   display\n.container {\rdisplay: grid | inline-grid;\r}\r   grid-template-columns grid-template-rows\ngrid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高\n.container {\rgrid-template-columns: 40px 50px auto 50px 40px;\rgrid-template-rows: 25% 100px auto;\r}\r  使用repeat()函数简化重复值 repeat(3, 100px);\n使用fr关键字（fraction 的缩写，意为\u0026quot;片段\u0026quot;）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。可以与绝对长度的单位结合使用\nauto关键字表示由浏览器自己决定长度。\n   grid-template-areas\n网格布局允许指定\u0026quot;区域\u0026quot;（area），一个区域由单个或多个单元格组成。grid-template-areas属性用于定义区域。如果某些区域不需要利用，则使用\u0026quot;点\u0026quot;（.）表示。\n.container {\rdisplay: grid;\rgrid-template-columns: 50px 50px 50px 50px;\rgrid-template-rows: auto;\rgrid-template-areas: \u0026quot;header header header header\u0026quot;\r\u0026quot;main main . sidebar\u0026quot;\r\u0026quot;footer footer footer footer\u0026quot;;\r}\r   grid-template\ngrid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。\n  grid-gap\ngrid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式。\n  grid元素上的属性   grid-column-start | grid-column-end | grid-row-start | grid-row-end\n项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。\n  grid-column 属性，grid-row 属性\ngrid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。\n.item {\rgrid-column: \u0026lt;start-line\u0026gt; / \u0026lt;end-line\u0026gt;;\rgrid-row: \u0026lt;start-line\u0026gt; / \u0026lt;end-line\u0026gt;;\r}\r```p\r   grid-area\ngrid-area属性指定项目放在哪一个区域，与grid-template-areas属性中分配的区域结合。\n.item-a {\rgrid-area: header;\r}\r   参考博客 flex 阮一峰\nflex tricks\ngrid tricks\ngrid 阮一峰\n","date":"2020-11-08","permalink":"https://heeeyueee.github.io/post/css%E5%B8%83%E5%B1%80/","tags":["CSS"],"title":"CSS布局"},{"content":"CSS语法 语法一:样式语法 选择器 {\r属性名: 属性值;\r/*注释*/\r}\r  所有符号都是英文符号，如果写错了，浏览器会警告 区分大小写，a 和 A 是不同的东西 没有 // 注释 最后一个分号可以省略，但建议不要省略  语法二:at 语法 @charset \u0026quot;UTF-8\u0026quot;;\r@import url(2.css);\r@media (min-width: 100px) and (max-width: 200px) {\r语法一\r}\r  @charset, 定义样式表使用的字符集，但 UTF-8 是字符编码 encoding，@charset 必须放在第一行 @import, 告诉 CSS 引擎引入一个外部样式表 @media, 如果满足媒介查询的条件则条件规则组里的规则生效 前两个 at 语法必须以分号 ; 结尾  文档流和文本流 文本流 Text flow 文本流是元素内部的一系列的字符的排列规则，简单来说是文档的读取和输出顺序，也就是我们通常看到的由左到右、由上而下的读取和输出形式，在网页中每个元素都是按照这个顺序进行排序和显示的，是单纯的相对于文字段落来说的，与容纳文字的元素无关。\n文档流 normal flow 文档流,英文是normal flow,又翻译为常规流,标准流,正常流,普通流等。\n文档流指的是HTML中元素在计算布局排版的过程中,所有处于文档流中的元素会自动的从左到右(非块级元素),从上到下(块级元素)的排列规则。\n脱离文档流与脱离文本流   使用浮动(float)\n  使用绝对定位(position:absolute/fixed)\n区别   浮动会使元素脱离文档流（其他块级元素计算高度时会忽略浮动元素）,但是不会脱离文本流,在于其他盒子的文本内容计算布局的时候,还是占位置的。\n  绝对定位会使元素脱离文档流,同时也会脱离文本流, 在于其他盒子的文本内容计算布局的时候,不占位置。\n      块级元素，内联元素和行块元素 三者转换 可以通过CSS设置display属性来转换display：block、inline、inline-block。inline 元素从左到右，到达最右边才会换行 block 元素从上到下，每一个都另起一行。inline-block 也是从左到右。\n宽度   inline 宽度为内部 inline 元素的和，不能用 width 指定\n  block 默认自动计算宽度，可用 width 指定\n  inline-block 结合前两者特点，可用 width\n  高度   inline 高度由 line-height 间接确定（与字体相关），跟 height 无关\n  block 高度由包裹的文档流元素决定 ,可以设 height,没有元素为0，文档流元素的高度由行高line-height决定.\n  inline-block 跟 block 类似，可以设置 height\n  CSS盒模型 概念 外边距——\u0026gt; 边框——\u0026gt; 内边距——\u0026gt;内容区\nCSS盒模型作用于可以放入内容的块级盒子，如div、span等等。一般使用border-box\n元素 CSS盒子包含以下5个元素：width、height、padding、border、margin。\n  margin与padding区别\n一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。\n  标准盒模型（content-box ）替代（IE）的盒模型（border-box）   标准盒模型（content-box ）content-box width = 内容宽度\n  border-box width = 内容宽度 + padding + border（background是border外边沿包围的区域）\n  ​\noverflow 溢出 等内容的宽度或高度大于容器的，会溢出,可用 overflow 来设置是否显示滚动条\n  auto 是灵活设置\n  scroll 是永远显示\n  hidden 是直接隐藏溢出部分\n  visible 是直接显示溢出部分\n  overflow 可以分为 overflow-x 和 overflow-y\n  margin 合并 父子 margin 合并,兄弟 margin 合并 阻止合并  父子合并用 padding / border 挡住 父子合并用 overflow: hidden 挡住 兄弟合并可以用 inline-block 消除  更多参考：CSS margin合并问题 基本单位 颜色    颜色值 说明     十六进制RGB值 #02798b   RGB值 rgb(2, 121, 139)   RGBA值 rgba(2, 121, 139, .3透明度)   HSL值 hsl(188色调, 97%饱和度, 28%亮度)   HSLA 值 hsla(188, 97%, 28%, .3透明度)    长度单位    长度单位 说明     px 像素   em 在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小   rem 根元素的字体大小   vw 视窗宽度的1%   vh 视窗高度的1%   百分数 相对于其他值设置的     参考博客 HTML中的文档流和文本流\nCSS盒模型\nCSS margin合并问题\n","date":"2020-11-08","permalink":"https://heeeyueee.github.io/post/css%E5%9F%BA%E7%A1%80/","tags":["css"],"title":"CSS基础"},{"content":" 列表标签,\u0026lt;img\u0026gt;图像标签,链接标签,\u0026lt;table\u0026gt;表格标签,\u0026lt;form\u0026gt; 表单标签,\u0026lt;input\u0026gt; 标签\n 列表标签   \u0026lt;ol\u0026gt; —— ordered list\n\u0026lt;ol\u0026gt;标签是一个有序列表容器（ordered list），会在内部的列表项前面产生数字编号。\n 用法   常规用法  \u0026lt;ol\u0026gt;\r\u0026lt;li\u0026gt;列表项 A\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;列表项 B\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;列表项 C\u0026lt;/li\u0026gt;\r\u0026lt;/ol\u0026gt;\r 嵌套用法  \u0026lt;ol\u0026gt;标签内部可以嵌套\u0026lt;ol\u0026gt;标签或\u0026lt;ul\u0026gt;标签，形成多级列表  属性   reversed  reversed属性产生倒序的数字列表\nstart  start属性的值是一个整数，表示数字列表的起始编号。\ntype  type属性指定数字编号的样式。目前，浏览器支持以下样式。\na：小写字母\nA：大写字母\ni：小写罗马数字\nI：大写罗马数字\n1：整数（默认值）\n  \u0026lt;ul\u0026gt; —— unordered list\n\u0026lt;ul\u0026gt;标签是一个无序列表容器（unordered list），会在内部的列表项前面产生实心小圆点，作为列表符号。\n 用法  \u0026lt;ul\u0026gt;标签内部可以嵌套\u0026lt;ul\u0026gt;或\u0026lt;ol\u0026gt;，形成多级列表。\n  \u0026lt;li\u0026gt; —— list item\n\u0026lt;li\u0026gt;表示列表项，用在\u0026lt;ol\u0026gt;或\u0026lt;ul\u0026gt;容器之中。\n有序列表\u0026lt;ol\u0026gt;之中，\u0026lt;li\u0026gt;有一个value属性，定义当前列表项的编号，后面列表项会从这个值开始编号。\n  \u0026lt;img\u0026gt;图像标签   简介\n\u0026lt;img\u0026gt;默认是一个行内元素，与前后的文字处在同一行。\u0026lt;img\u0026gt;可以放在\u0026lt;a\u0026gt;标签内部，使得图片变成一个可以点击的\n  链接。\r  属性   src  src属性指定图片的网址,可以是绝对URL，也可以是相对URL\nalt  alt属性用来设定图片的文字说明。图片不显示时（比如下载失败，或用户关闭图片加载），图片的位置上会显示该文本。\nwidth属性 height属性  图片默认以原始大小插入网页，width属性和height属性可以指定图片显示时的宽度和高度，单位是像素或百分比。\nsrcset、sizes(详见MDN)  srcset属性用来指定多张图像，适应不同像素密度的屏幕sizes属性用来不同尺寸的屏幕，显示不同大小的图像\n链接标签  \u0026lt;a\u0026gt;   属性    href\n 网址 href=\u0026quot;//www.example.com/\u0026quot;(浏览器会自动匹配)\n路径 href=\u0026quot;./index.md\u0026quot;\n伪协议 href=\u0026ldquo;javascript:void(0);\u0026quot;(去除默认跳转)\nid href=\u0026quot;#xxx\u0026rdquo; 跳转到内部元素\n   target\ntarget属性指定如何展示打开的链接。它可以是在指定的窗口打开 使用target属性的时候，最好跟rel=\u0026ldquo;noreferrer\u0026quot;一起使用，这样可以避免安全风险。\n _self：当前窗口打开，这是默认值\n_blank：新窗口打开\n_parent：上层窗口打开，这通常用于从父窗口打开的子窗口\n_top：顶层窗口打开。\n   rel\nrel属性说明链接与当前页面的关系。\n noopener：告诉浏览器打开链接时，不让链接窗口通过 JavaScript 的window.opener属性引用原始窗口，这样就提高了安全性。\nnoreferrer：告诉浏览器打开链接时，不要将当前网址作为 HTTP 头信息的Referer字段发送出去，这样可以隐藏点击的来源\n   download\ndownload属性表明当前链接用于下载，而不是跳转到另一个 URL。 如果download属性设置了值，那么这个值就是下载的文件名。\n\u0026lt;a href=\u0026quot;foo.exe\u0026quot; download=\u0026quot;bar.exe\u0026quot;\u0026gt;点击下载\u0026lt;/a\u0026gt;\r     \u0026lt;link\u0026gt; \u0026lt;link\u0026gt;标签主要用于将当前网页与相关的外部资源联系起来，通常放在\u0026lt;head\u0026gt;元素里面。最常见的用途就是加载 CSS 样式表。\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;theme.css\u0026quot;\u0026gt;\r   \u0026lt;table\u0026gt;表格标签   \u0026lt;table\u0026gt;\n\u0026lt;table\u0026gt;是一个块级容器标签，所有表格内容都要放在这个标签里面。\n  \u0026lt;caption\u0026gt;\n\u0026lt;caption\u0026gt;总是\u0026lt;table\u0026gt;里面的第一个子元素，表示表格的标题。该元素是可选的。\n  \u0026lt;thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tfoot\u0026gt;\n\u0026lt;thead\u0026gt;、\u0026lt;tbody\u0026gt;、\u0026lt;tfoot\u0026gt;都是块级容器元素，且都是\u0026lt;table\u0026gt;的一级子元素，分别表示表头、表体和表尾。\n  \u0026lt;tr\u0026gt;——table row\n\u0026lt;tr\u0026gt;标签表示表格的一行（table row）\n  \u0026lt;th\u0026gt; \u0026lt;td\u0026gt;——table data\n\u0026lt;th\u0026gt;和\u0026lt;td\u0026gt;都用来定义表格的单元格。其中，\u0026lt;th\u0026gt;是标题单元格，\u0026lt;td\u0026gt;是数据单元格。\n 属性   colspan属性，rowspan属性  单元格会有跨越多行或多列的情况，这要通过colspan属性和rowspan属性设置，前者表示单元格跨越的栏数，后者表示单元格跨越的行数。\nscope属性  scope属性只有\u0026lt;th\u0026gt;标签支持，一般不在\u0026lt;td\u0026gt;标签使用，表示该\u0026lt;th\u0026gt;单元格到底是栏的标题，还是列的标题。取值：row（行）、col（列）\n使用举例\n  \u0026lt;form\u0026gt; 表单标签 \u0026lt;input\u0026gt; 标签 ","date":"2020-11-07","permalink":"https://heeeyueee.github.io/post/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/","tags":["HTML"],"title":"HTML常用标签"},{"content":" 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。\n HTML的历史 HTML的首个公开描述出现于一个名为HTML Tags 页面存档备份，存于互联网档案馆的文件中，由蒂姆·伯纳斯-李于1991年底提及。它描述18个元素，包括HTML初始的、相对简单的设计。它的最大特点就是支持超链接，点击链接就可以跳转到其他网页，从而构成了整个互联网。\n2004年，网页超文本应用技术工作小组（WHATWG）开始开发HTML5，并在2008年与W3C共同交付，2014年10月28日完成标准化。\nHTML 起手 \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;zh-CN\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt;\r\u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;ie=edge\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r   \u0026lt;!DOCTYPE \u0026gt;标签:文档类型，告诉浏览器如何解析网页\n  \u0026lt;html\u0026gt;标签:网页的顶层容器，即标签树结构的顶层节点，也称为根元素（root element），其他元素都是它的子元素。一个网页只能有一个\u0026lt;html\u0026gt;标签。lang属性，表示网页内容默认的语言。\n  \u0026lt;head\u0026gt;标签:容器标签，用于放置网页的元信息。它的内容不会出现在网页上，而是为网页渲染提供额外信息。\n   \u0026lt;head\u0026gt;子元素 作用     \u0026lt;meta\u0026gt;  设置网页的元数据   \u0026lt;link\u0026gt;  连接外部样式表   \u0026lt;title\u0026gt;  设置网页标题   \u0026lt;style\u0026gt;  放置内嵌的样式表   \u0026lt;script\u0026gt; 引入脚本   \u0026lt;noscript\u0026gt; 浏览器不支持脚本时，所要显示的内容   \u0026lt;base\u0026gt;  设置网页内部相对 URL 的计算基准      \u0026lt;meta\u0026gt;标签:设置或说明网页的元数据，必须放在\u0026lt;head\u0026gt;里面。一个\u0026lt;meta\u0026gt;标签就是一项元数据，网页可以有多个\u0026lt;meta\u0026gt;。\u0026lt;meta\u0026gt;标签约定放在\u0026lt;head\u0026gt;内容的最前面。上面代码中：第一个\u0026lt;meta\u0026gt;标签表示网页采用 UTF-8 格式编码，第二个\u0026lt;meta\u0026gt;标签表示网页在手机端可以自动缩放。\n   \u0026lt;meta\u0026gt;标签属性 作用     name 属性 表示元数据的名字   content 属性 表示元数据的值   http-equiv 属性 用来覆盖 HTTP 回应的头信息字段(与content属性一起使用)   charset属性 指定网页的编码方式 \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;       \u0026lt;title\u0026gt;标签:用于指定网页的标题，会显示在浏览器窗口的标题栏。\n  \u0026lt;body\u0026gt;标签:是一个容器标签，用于放置网页的主体内容。浏览器显示的页面内容，都放置在它的内部。它是\u0026lt;html\u0026gt;的第二个子元素，紧跟在\u0026lt;head\u0026gt;后面。\n   **ps:**怎样设置VS code的模板代码\nsettings——用户代码片段——搜索HTML.json——配置\n body中常用章节标签 \u0026lt;body\u0026gt;\r\u0026lt;header\u0026gt;页眉\u0026lt;/header\u0026gt;\r\u0026lt;main\u0026gt;\r\u0026lt;article\u0026gt;\r\u0026lt;h1\u0026gt;文章标题\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;文章内容\u0026lt;/p\u0026gt;\r\u0026lt;/article\u0026gt;\r\u0026lt;/main\u0026gt;\r\u0026lt;footer\u0026gt;页尾\u0026lt;/footer\u0026gt;\r\u0026lt;/body\u0026gt;\r  \u0026lt;header\u0026gt;:表示一篇文章或者一个区块的头部 \u0026lt;footer\u0026gt;:表示网页、文章或章节的尾部 \u0026lt;main\u0026gt;:标签表示页面的主体内容，一个页面只能有一个\u0026lt;main\u0026gt; \u0026lt;main\u0026gt;是顶层标签，不能放置在\u0026lt;header\u0026gt;、\u0026lt;footer\u0026gt;、\u0026lt;article\u0026gt;、\u0026lt;aside\u0026gt;、\u0026lt;nav\u0026gt;等标签之中。 \u0026lt;article\u0026gt;:表示页面里面一段完整的内容 \u0026lt;aside\u0026gt;:标签用来放置网页侧边栏或与网页、文章主要内容间接相关的部分 \u0026lt;section\u0026gt;:表示一个含有主题的独立部分，通常用在文档里面表示一个章节 \u0026lt;nav\u0026gt;:标签用于放置页面或文档的导航信息，往往放置在\u0026lt;header\u0026gt;里面 \u0026lt;h1\u0026gt;~\u0026lt;h6\u0026gt;:HTML 提供了6个标签，用来表示文章的标题。按照标题的等级，一共分成六级。  body中常用文本标签   \u0026lt;div\u0026gt;:一个通用标签，表示一个区块（division）\n  \u0026lt;p\u0026gt;:是一个块级元素，代表文章的一个段落（paragraph）\n  \u0026lt;span\u0026gt;:一个通用目的的行内标签（即不会产生换行），不带有任何语义\n  \u0026lt;br\u0026gt;:换行符，单独使用的，没有闭合标签\nPS：HTML空格和换行处理规则\n 标签内容的头部和尾部的空格，一律忽略不计\n标签内容里面的多个连续空格（包含制表符\\t），会被浏览器合并成一个\n浏览器还会将文本里面的换行符（\\n）和回车符（\\r），替换成空格\n   \u0026lt;hr\u0026gt;:水平线分割线,单独使用的，没有闭合标签\n  \u0026lt;pre\u0026gt;:一个块级元素，表示保留原来的格式（preformatted），即浏览器会保留该标签内部原始的换行和空格。 PS: HTML 标签在\u0026lt;pre\u0026gt;里面还是起作用的。\u0026lt;pre\u0026gt;只保留空格和换行，不会保留 HTML标签 **\n与code标签一起使用\n  \u0026lt;strong\u0026gt;:以粗体显示内容,表示内容本身的重要性\n  \u0026lt;em\u0026gt;:以斜体显示它包含的内容,表示语气上的强调\n  \u0026lt;code\u0026gt;:一个行内元素，表示标签内容是计算机代码，浏览器默认会以等宽字体显示。\n  \u0026lt;blockquote\u0026gt;:是一个块级标签，表示引用,cite属性，它的值是一个网址，表示引言来源，不会显示在网页上 *\u0026lt;q\u0026gt;:是一个行内标签，也表示引用。它与\u0026lt;blockquote\u0026gt;的区别，就是它不会产生换行。\n  HTML常用行级标签和块级标签  行级标签:可以和其他元素保持在同一行，不可以自动换行，但不能设置宽高 块级标签:不可以和其他元素保持在同一行（独占一行），可以自动换行，能设置宽高 嵌套规则:块标签可以套行标签，行标签不可以套块标签。P标签不要套块属性标签，可以套a，span，文本    块级标签 行级标签     \u0026lt;article\u0026gt; \u0026lt;b\u0026gt;   \u0026lt;aside\u0026gt;  \u0026lt;em\u0026gt;   \u0026lt;blockquote\u0026gt;  \u0026lt;strong\u0026gt;   \u0026lt;div\u0026gt;  \u0026lt;i\u0026gt;   \u0026lt;dl\u0026gt; \u0026lt;a\u0026gt;   \u0026lt;footer\u0026gt;  \u0026lt;br\u0026gt;   \u0026lt;form\u0026gt;  \u0026lt;img\u0026gt;   \u0026lt;h1\u0026gt;~\u0026lt;h6\u0026gt;  \u0026lt;q\u0026gt;   \u0026lt;header\u0026gt;  \u0026lt;span\u0026gt;   \u0026lt;hgroup\u0026gt;  \u0026lt;button\u0026gt;   \u0026lt;hr\u0026gt;  \u0026lt;input\u0026gt;   \u0026lt;ol\u0026gt;  \u0026lt;label\u0026gt;   \u0026lt;p\u0026gt;  \u0026lt;select\u0026gt;   \u0026lt;section\u0026gt;  \u0026lt;code\u0026gt;   \u0026lt;table\u0026gt;  \u0026lt;abbr\u0026gt;   \u0026lt;ul\u0026gt;  \u0026amp;nbsp   \u0026lt;video\u0026gt;  \u0026amp;copy      元素的属性 网页元素的属性（attribute）可以定制元素的行为，不同的属性会导致元素有不同的行为。元素属性的写法是 HTML 标签内部的“键值对”。\n 属性名与标签名一样，不区分大小写，lang和LANG是同一个属性。 属性名与属性值之间，通过等号=连接。属性值可以放在单引号或双引号之中，建议统一使用双引号。某些属性值可以不使用引号，但是建议不要这样写。 有些属性是布尔属性，属性值可以省略，只要添加了属性名，就表示打开该属性。如：checked、hidden  全局属性\n全局属性（global attributes）是所有元素都可以使用的属性。\n id:属性是元素在网页内的唯一标识符,慎用,html不会纠错重复的id class:属性用来对网页元素进行分类。元素可以同时具有多个 class，它们之间使用空格分隔 title:属性用来为元素添加附加说明。鼠标悬浮在元素上面时，会将title属性值作为浮动提示，显示出来。 tabindex:控制 Tab 键遍历网页元素的顺序。  0，表示最后才被 tab 访问 -1，表示不可被 tab 访问 正整数， 网页元素按照从小到大的顺序（1、2、3、……），参与 Tab 键的遍历。   style:指定当前元素的 CSS 样式 accesskey:指定网页元素获得焦点的快捷键 hidden:一个布尔属性，表示当前的网页元素不再跟页面相关，因此浏览器不会渲染这个元素，所以就不会在网页中看到它 dir:属性表示文字的阅读方向  ltr：从左到右阅读，比如英语。 rtl：从右到左阅读 auto：浏览器根据内容的解析结果，自行决定   contenteditable:contenteditable属性允许用户修改内容。它有两个可能的值。  true或空字符串：内容可以编辑 false：不可以编辑    HTML5验证器  安装检查工具validator $ yarn global add node-w3c-validator\r  在VS code的终端通过命令使用 node-w3c-validator -i 被检查的HTMl文件.html\r   取消HTML标签默认属性样式 cssreset.css\n* {\rmargin: 0;\rpadding: 0;\rbox-sizing: border-box;\r}\r*::before,\r*::after {\rbox-sizing: border-box;\r}\ra {\rcolor: inherit;\rtext-decoration: none;\r}\rinput,\rbutton {\rfont-family: inherit;\r}\rol,\rul {\rlist-style: none;\r}\rtable {\rborder-collapse: collapse;\rborder-spacing: 0;\r}\r","date":"2020-11-06","permalink":"https://heeeyueee.github.io/post/html%E5%85%A5%E9%97%A8/","tags":["HTML"],"title":"HTML入门"},{"content":" 记录一下搭建过程\n 步骤：   使用scoop安装Hugo\n Scoop安装、配置与使用  Scoop是Windows的命令行安装程序，是一个强大的包管理工具。\n安装 在Cmder的PowerShell中运行以下命令\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')  输入scoop help验证是否成功 截图 配置 在cmd命令行中执行以下命令更改scoop安装路径\n将Scoop安装到自定义目录(命令行方式)\n$env:SCOOP='D:\\Applications\\Scoop' [Environment]::SetEnvironmentVariable('SCOOP', $env:SCOOP, 'User')  将Scoop安装到自定义目录(命令行方式)\n$env:SCOOP_GLOBAL='F:\\GlobalScoopApps' [Environment]::SetEnvironmentVariable('SCOOP_GLOBAL', $env:SCOOP_GLOBAL, 'Machine')  也可以手动更改目录 使用  安装aria2以加快scoop下载软件的速度  scoop install aria2   下载hugo   scoop install hugo-extended  截图 hugo的安装路径\nD:\\Applications\\Scoop\\apps\\hugo-extended\\0.77.0\n     使用Hugo快速生成站点\n 使用cmd命令行工具,在hugo的安装路径下执行命令：  $ hugo new site D:\\hugoblog\\heeeyueee(生成站点的目录)     安装主题  在站点目录的themes文件夹中使用git clone命令下载主题  $ git clone https://github.com/CaiJimmy/hugo-theme-stack.git   依照主题配置config.toml文件，新建assets文件夹(慢慢研究) 运行Hugo  $ hugo server --theme=hugo-theme-stack --buildDrafts     部署  首先在GitHub上创建一个Repository，命名为：heeeyueee.github.io 在站点根目录执行 Hugo 命令生成最终页面：  $ hugo --theme=hyde --baseUrl=\u0026quot;http://heeeyueee.github.io/\u0026quot; (或者直接打开config文件修改baseUrl 再运行 Hugo 命令)   将pubilc目录里所有文件 push 到刚创建的Repository的 main 分支  $ cd public $ git init $ git remote add origin https://github.com/heeeyueee/heeeyueee.github.io.git $ git add -A $ git commit -m \u0026quot;first commit\u0026quot; $ git branch -M main $ git push -u origin main   浏览器访问：http://heeeyueee.github.io/,成功！    写博客   使用hugo命令来创建文章目录\n$ hugo new post/first.md  ps:去掉文章头部的 draft=true\n  在文章目录中存放文章所需图片，markdown语法引入PicGo图床生成的图片\n  使用hugo命令来更新文章(把hugo命令设为全局变量)\nhugo --theme=hugo-theme-fuji --baseUrl=\u0026quot;https://heeeyueee.github.io/\u0026quot;    summary 希望自己能认真记录（词穷人太难了）\n用到的链接  fuji主题文档 Hugo中文文档 知乎文章 scoop的安装配置与使用 PicGo图床 ","date":"2020-11-05","permalink":"https://heeeyueee.github.io/post/first/","tags":["博客搭建"],"title":"First"}]